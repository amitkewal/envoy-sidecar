admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901

static_resources:

  listeners:
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          generate_request_id: true
          tracing:
            provider:
              name: envoy.tracers.opentelemetry
              typed_config:
                "@type": type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig
                grpc_service:
                  envoy_grpc:
                    cluster_name: opentelemetry_collector
                  timeout: 0.250s
                service_name: front-envoy
          codec_type: AUTO
          stat_prefix: ingress_http
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
          http_filters:
          - name: "envoy.filters.http.cache"
            typed_config:
              "@type": "type.googleapis.com/envoy.extensions.filters.http.cache.v3.CacheConfig"
              typed_config:
                "@type": "type.googleapis.com/envoy.extensions.http.cache.simple_http_cache.v3.SimpleHttpCacheConfig"
          - name: envoy.filters.http.local_ratelimit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
              stat_prefix: http_local_rate_limiter
          
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router  
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  prefix: "/h"
                route:
                  prefix_rewrite: "/hello"
                  cluster: flask_service
              - match:
                  prefix: "/roll"
                route:
                  prefix_rewrite: "/roll"
                  cluster: flask_service
  clusters:
  - name: flask_service
    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    load_assignment:
      cluster_name: flask_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: flaskapi #docker-compose
                # address: localhost #kubectl
                port_value: 5000
    circuit_breakers:
      thresholds:
        max_connections: 48  # not for HTTP/2
        max_pending_requests: 48  # not for HTTP/2
        # max_requests: 48  # not for HTTP/1.1
        max_retries: 1
    health_checks:
      timeout: 5s
      interval: 15s
      unhealthy_threshold: 3
      healthy_threshold: 3
      no_traffic_interval: 60s
      event_log_path: /dev/stdout
      always_log_health_check_failures: true
      http_health_check:
        path: /hello
  - name: opentelemetry_collector  #https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/examples/demo/docker-compose.yaml
    type: STRICT_DNS              #https://github.com/envoyproxy/envoy/tree/main/examples/opentelemetry
    lb_policy: ROUND_ROBIN
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}
    load_assignment:
      cluster_name: opentelemetry_collector
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: opentelemetry #docker-compose
                # address: localhost #kubectl
                port_value: 55679
