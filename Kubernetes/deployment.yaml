apiVersion: v1
kind: Namespace
metadata:
  name: sidecar

---

apiVersion: v1
kind: ConfigMap
metadata:
  namespace: sidecar
  name: envoy-config
data:
  config.yaml: |
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address:
          protocol: TCP
          address: 0.0.0.0
          port_value: 9901

    static_resources:

      listeners:
      - name: listener_0
        address:
          socket_address:
            protocol: TCP
            address: 0.0.0.0
            port_value: 10000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              generate_request_id: true
              tracing:
                provider:
                  name: envoy.tracers.opentelemetry
                  typed_config:
                    "@type": type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig
                    grpc_service:
                      envoy_grpc:
                        cluster_name: opentelemetry_collector
                      timeout: 0.250s
                    service_name: front-envoy
              codec_type: AUTO
              stat_prefix: ingress_http
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              http_filters:
              - name: envoy.filters.http.local_ratelimit
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                  stat_prefix: http_local_rate_limiter
              
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router  
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/h"
                    route:
                      prefix_rewrite: "/hello"
                      cluster: flask-service
                  - match:
                      prefix: "/roll"
                    route:
                      prefix_rewrite: "/roll"
                      cluster: flask-service
      clusters:
      - name: flask-service
        type: LOGICAL_DNS
        # Comment out the following line to test on v6 networks
        dns_lookup_family: V4_ONLY
        load_assignment:
          cluster_name: flask-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    # address: flaskapi #docker-compose
                    address: localhost #kubectl
                    port_value: 5000
        circuit_breakers:
          thresholds:
            max_connections: 48  # not for HTTP/2
            max_pending_requests: 48  # not for HTTP/2
            # max_requests: 48  # not for HTTP/1.1
            max_retries: 1
        health_checks:
          timeout: 5s
          interval: 15s
          unhealthy_threshold: 3
          healthy_threshold: 3
          no_traffic_interval: 60s
          event_log_path: /dev/stdout
          always_log_health_check_failures: true
          http_health_check:
            path: /hello
      - name: opentelemetry_collector  #https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/examples/demo/docker-compose.yaml
        type: STRICT_DNS              #https://github.com/envoyproxy/envoy/tree/main/examples/opentelemetry
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        load_assignment:
          cluster_name: opentelemetry_collector
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    # address: opentelemetry #docker-compose
                    address: localhost #kubectl
                    port_value: 4317

---


# apiVersion: v1
# kind: ConfigMap
# metadata:
#   namespace: sidecar
#   name: otel-collector-config
# data:
#   config.yaml: |
#     receivers:
#       otlp:
#         protocols:
#           grpc:
#             endpoint: 0.0.0.0:4317
#           http:
#             endpoint: 0.0.0.0:4318

#     exporters:
#       # logging:
#       #   loglevel: info

#       jaeger:
#         endpoint: "jaeger.default.svc.cluster.local:14250"
#         tls:
#           insecure: true

#     service:
#       pipelines:
#         traces:
#           receivers: [otlp]
#           processors: []
#           exporters: [jaeger]

---


apiVersion: apps/v1
kind: Deployment

metadata:
  namespace: sidecar
  name: app-envoy-sidecar-deployment
  labels:
    app: app-envoy-sidecar

spec:
  replicas: 1

  selector:
    matchLabels:
      app: app-envoy-sidecar

  template:
    metadata:
      labels:
        app: app-envoy-sidecar
    # dckr_pat_kGBQL9TT3j0THoAEUc33vvLw8Jw
    # The imp stuff
    spec:
      containers:

      # - name: envoy-jaeger
      #   image: jaegertracing/all-in-one:latest
      #   ports:
      #       - containerPort: 5775
      #         protocol: UDP
      #       - containerPort: 6831
      #         protocol: UDP
      #       - containerPort: 6832
      #         protocol: UDP
      #       - containerPort: 5778
      #         protocol: TCP
      #       - containerPort: 16686
      #         protocol: TCP
      #       - containerPort: 9411
      #         protocol: TCP
      #       - containerPort: 4317
      #         protocol: TCP
      #       - containerPort: 4318
      #         protocol: TCP
      #   env:
      #     - name: COLLECTOR_OTLP_ENABLED
      #       value: "true"
      #     - name: LOG_LEVEL
      #       value: info      
      - name: flask-service
        image: envoyproxy/envoy:v1.24-latest
        ports:
          - containerPort: 9901
            name: envoy-admin
          - containerPort: 10000
            name: envoy-web
        volumeMounts:
          - name: envoy-config-volume
            mountPath: /etc/envoy/
        command: ["/usr/local/bin/envoy"]
        args: ["-c", "/etc/envoy/config.yaml", "-l", "info","--service-cluster","flask-service","--service-node","flask-service", "--log-format", "[METADATA][%Y-%m-%d %T.%e][%t][%l][%n] %v"]

      
      # - name: envoy-sidecar
      #   image: envoy-sidecar-envoygateway:latest
      #   imagePullPolicy: Never
      #   ports:
      #     - containerPort: 9901
      #       name: envoy-admin
      #     - containerPort: 10000
      #       name: envoy-web

      - name: flaskapi
        imagePullPolicy: Never
        image: envoy-sidecar-flaskapi:latest
        env:
          - name: port
            value: "5000"
        ports:
          - containerPort: 5000
            name: flaskapi

      # - name: myappimage-sidecar
      #   image: amitkewal/myappimage-sidecar:latest
      #   ports:
      #     - containerPort: 5200
      
      # - name: otel-collector
      #   image: otel/opentelemetry-collector:latest
      #   args: ["--config=/etc/otel-collector/otel-collector-config.yaml"]
      #   volumeMounts:
      #     - name: config-volume
      #       mountPath: /etc/otel-collector/otel-collector-config.yaml
      #       subPath: otel-collector
      #   ports:
      #     - containerPort: 4317
      #       name: grpc
      #     - containerPort: 55680
      #       name: test
      #     - containerPort: 4318
      #       name: http       

      volumes:
        - name: envoy-config-volume
          configMap:
            name: envoy-config
        - name: config-volume
          configMap:
            name: otel-collector-config
        - name: log-volume
          emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  namespace: sidecar
  name: app-envoy-sidecar-svc
spec:
  type: ClusterIP
  selector:
    app: app-envoy-sidecar
  ports:
    - name: admin
      protocol: TCP
      port: 9901
      targetPort: 9901
    - name: web-proxy
      protocol: TCP
      port: 10000
      targetPort: 10000
    - name: flaskapi
      protocol: TCP
      port: 5000
      targetPort: 5000


---

# apiVersion: v1
# kind: Service
# metadata:
#   name: opentelemetry
# spec:
#   type: ClusterIP
#   selector:
#     app: app-envoy-sidecar
#   ports:
#     - name: opetelemetry
#       protocol: TCP
#       port: 4317
#       targetPort: 4317




