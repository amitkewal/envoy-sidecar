apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
data:
  kong.yaml: |
    _format_version: "1.1"
    services:
      - name: app-envoy-sidecar-svc
        protocol: http
        host: app-envoy-sidecar-svc
        port: 10000
        plugins: [{
         "name": "rate-limiting",
         "config": {
         "policy": "local",
         "limit_by": "ip",
         "minute": 100
           }
        }]
        routes:
          - tags:
              &a1
              - OAS3_import
              - OAS3file_petstore.json
            name: app-envoy-sidecar-svc-hello
            methods:
              - GET
            paths:
              - /
            strip_path: false
          - tags: *a1
            name: app-envoy-sidecar-svc-hellopost
            methods:
              - POST
            paths:
              - /pets$
            strip_path: false
        tags: *a1
    upstreams:
      - name: demo-upstream
        targets:
          - target: flaskapi.hello.com:10000
        tags:
          - OAS3_import
          - OAS3file_petstore.json


---

apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  ports:
  - name: kong-proxy
    port: 8000
    targetPort: 8000
    protocol: TCP
  selector:
    app: kong

---
apiVersion: v1
kind: Service
metadata:
  name: kong-proxy-ssl
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  ports:
  - name: kong-proxy-ssl
    port: 8443
    targetPort: 8443
    protocol: TCP
  selector:
    app: kong

---
apiVersion: v1
kind: Service
metadata:
  name: kong-admin
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  ports:
  - name: kong-admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  selector:
    app: kong

---
apiVersion: v1
kind: Service
metadata:
  name: kong-admin-ssl
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  ports:
  - name: kong-admin-ssl
    port: 8444
    targetPort: 8444
    protocol: TCP
  selector:
    app: kong

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: pod-service
# spec:
#   type: ClusterIP
#   ports:
#   - name: http
#     port: 80
#     targetPort: 8080
#     protocol: TCP
#   selector:
#     app: demo-service

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kong
  name: kong
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kong
  template:
    metadata:
      annotations:
        kuma.io/gateway: enabled
        kuma.io/service-account-token-volume: kong-serviceaccount-token
        traffic.sidecar.istio.io/includeInboundPorts: ""
      labels:
        app: kong
    spec:
      volumes:
      - name: shared-logs
        emptyDir: {}
      automountServiceAccountToken: false
      containers:
      - name: kong-server
        image: kong
        env:
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_PROXY_ACCESS_LOG
            value: "/dev/stdout"
          - name: KONG_ADMIN_ACCESS_LOG
            value: "/dev/stdout"
          - name: KONG_DECLARATIVE_CONFIG
            value: "/usr/local/kong/declarative/kong.yaml"
          - name: KONG_PROXY_ERROR_LOG
            value: "/dev/stderr"
          - name: KONG_ADMIN_ERROR_LOG
            value: "/dev/stderr"
        command:  [ "/bin/sh", "-c", "KONG_CLUSTER_ADVERTISE=$(KONG_HOST_IP):7946 KONG_NGINX_DAEMON='off'  kong start && apk add curl" ]
        volumeMounts:
          - name: kong-config-volume
            mountPath: "/usr/local/kong/declarative/"
        ports:
        - name: admin
          containerPort: 8001
          protocol: TCP
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: proxy-ssl
          containerPort: 8443
          protocol: TCP
        - name: admin-ssl
          containerPort: 8444
          protocol: TCP
      volumes:
       - name: kong-config-volume
         configMap:
           name: kong-config

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: demo-service
#   labels:
#     app: demo-service
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: demo-service
#   template:
#     metadata:
#       labels:
#         app: demo-service
#     spec:
#       containers:
#       - name: demo-service
#         image: arungupta/helloworld-spring-boot:latest
#         ports:
#         - containerPort: 80
#         - containerPort: 443
# ---

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: my-app
# spec:
#   ingressClassName: kong
#   rules:
#   - host: myapp.example.com
#     http:
#       paths:
#       - path: /
#         pathType: ImplementationSpecific
#         backend:
#           service:
#             name: demo-service
#             port:
#               number: 80